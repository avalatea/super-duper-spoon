name: Auto Release Build

on:
  workflow_dispatch:
    inputs:
      service:
        description: "The name of the service to build and release"
        required: true
        type: string
      custom_tag:
        description: "Custom tag version (e.g., 1.2.3). Leave empty for auto-increment."
        required: false
        type: string

run-name: "Auto Release Build [${{ inputs.service }}] ${{ github.sha }}"

jobs:
  release-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag and increment version
        id: version
        run: |
          service_name="${{ inputs.service }}"
          
          # Check if custom tag is provided
          if [ -n "${{ inputs.custom_tag }}" ]; then
            echo "Using custom tag: ${{ inputs.custom_tag }}"
            new_version="${{ inputs.custom_tag }}"
          else
            # Get the latest tag for this specific service
            latest_tag=$(git tag -l "${service_name}-v*" --sort=-version:refname | head -n1)

            if [ -z "$latest_tag" ]; then
              echo "No existing tags found for service $service_name, starting with 0.0.1"
              new_version="0.0.1"
            else
              echo "Latest tag for $service_name: $latest_tag"
              
              # Extract version parts (assuming format: service-v1.2.3)
              version_part="${latest_tag#${service_name}-v}"
              IFS='.' read -ra VERSION_PARTS <<< "$version_part"
              major=${VERSION_PARTS[0]:-0}
              minor=${VERSION_PARTS[1]:-0}
              patch=${VERSION_PARTS[2]:-0}
              
              # Increment patch version
              patch=$((patch + 1))
              new_version="$major.$minor.$patch"
            fi
          fi

          echo "New version: $new_version"
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
          echo "tag=${service_name}-v$new_version" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.version.outputs.tag }} \
            --title "${{ inputs.service }} ${{ steps.version.outputs.version }}" \
            --notes "Auto-generated release for ${{ inputs.service }} v${{ steps.version.outputs.version }}

          Changes in this release:
          - Auto-incremented from previous version for service ${{ inputs.service }}
          - Built from commit ${{ github.sha }}"

      - name: Build (Placeholder)
        run: |
          echo "Building version ${{ steps.version.outputs.version }}"
          echo "This is where your actual build steps would go"
          echo "For example:"
          echo "  - npm install && npm run build"
          echo "  - docker build -t myapp:${{ steps.version.outputs.version }} ."
          echo "  - pytest"
          echo "Build completed successfully!"
